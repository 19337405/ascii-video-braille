// SETUP

offset = 0 // x offset
groups_in_use = 900 // how many groups you want to use, if it errors, you may want to lower the number
use_1x = false // slows down the loading speed by 50% and might also crash
size = 7 // 7 blocks tall

// END SETUP



if groups_in_use < 50 { throw "too little groups!" }
extract obj_props

$.print("reading output...")
__text = $.readfile("out.txt").split("|")[:-1].map(v => v.split(";"))

framerate = @number(__text[0][0])
width = @number(__text[0][1])
height = @number(__text[0][2])
text = __text[1:]

// idk which one is better so i used specky's speed library thingy https://github.com/SpeckyYT/SPWN-speed/
player_speed = 10.37613454 if use_1x else 19.184659239999995 // 10.3761348898 if use_1x else 19.1846522782
frame_speed = player_speed*30*framerate

let groups = level.get_objects(GROUPS, g => true).map(o => o[GROUPS]).filter(n => n != null).flatten().length // p
let used_groups_idx = 0
let used_groups = []
let using_used_groups = false
let last_group = null
let last_last_group = null

obj{
    OBJ_ID: 201 if use_1x else 1334,
    X: -15,
    Y: 15,
}.add()

// black bg
obj{
    OBJ_ID: 899,
    X: -30,
    Y: 45,
    TRIGGER_RED: 0,
    TRIGGER_GREEN: 0,
    TRIGGER_BLUE: 0,
    DURATION: 0,
    TARGET_COLOR: 1000c
}.add()

// red 1c
obj{
    OBJ_ID: 899,
    X: -30,
    Y: 45,
    TRIGGER_RED: 255,
    TRIGGER_GREEN: 0,
    TRIGGER_BLUE: 0,
    DURATION: 0,
    TARGET_COLOR: 1c
}.add()

if framerate == 0 {
    for j in 0..text.length {
        frame = text[j]
        for i in 0..frame.length/2 {
            let color = frame[i*2].split(",")
            color[0] = color[0].replace("\n", "").replace("\r", "")
            channel = frame[i*2+1]

            channel.to_obj().with(HVS_ENABLED, true).with(HVS, "{}a{}a{}a0a0".fmt(color)).with(X, 210).with(Y, 120).with(SCALING, ((width+0.5)/(height+0.5)*size)/width).add()
        }
    }
} else {
    $.print()

    let last_frame = []
    const_group = ?g

    for j in 0..text.length {
        frame = text[j]

        if frame == last_frame {
            obj{
                OBJ_ID: 901,
                X: offset + j*frame_speed-2,
                Y: -20,
                TARGET: last_group,
                DURATION: framerate,
                MOVE_X: frame_speed,
            }.add()

            continue
        }

        if frame.length < 2 {
            if last_last_group != null {
                obj{
                    OBJ_ID: 1049,
                    X: offset + j*frame_speed,
                    Y: -60,
                    TARGET: last_last_group,
                    ACTIVATE_GROUP: false,
                }.add()
            }

            $.print("\u{1b}[1Aframe ",j+1,"/",text.length)
            continue
        }

        if groups >= groups_in_use-1 {
            using_used_groups = true
            groups = 0

            obj{
                OBJ_ID: 901,
                X: offset + j*frame_speed-1,
                Y: 345,
                TARGET: const_group,
                DURATION: 0,
                MOVE_X: -frame_speed-2,
            }.add()
            // loops++
        }

        let group = null
        if using_used_groups {
            if used_groups_idx >= groups_in_use-1 {
                used_groups_idx = 0

                obj{
                    OBJ_ID: 901,
                    X: offset + j*frame_speed-1,
                    Y: 345,
                    TARGET: const_group,
                    DURATION: 0,
                    MOVE_X: -frame_speed-2,
                }.add()
                // loops++
            }
            group = used_groups[used_groups_idx]
            used_groups_idx++
        } else {
            group = ?g
            used_groups.push(group)
            groups++
        }
        
        obj{
            OBJ_ID: 1049,
            X: -30,
            Y: -30,
            TARGET: group,
            ACTIVATE_GROUP: false,
        }.add()

        for i in 0..frame.length/2 {
            let color = frame[i*2].split(",")
            color[0] = color[0].replace("\n", "").replace("\r", "")
            channel = frame[i*2+1]

            channel.to_obj().with(HVS_ENABLED, true).with(HVS, "{}a{}a{}a0a0".fmt(color)).with(X, 75+offset + j*frame_speed).with(Y, 150).with(SCALING, ((width+0.5)/(height+0.5)*size)/width).with(GROUPS, [group, const_group]).add()
        }

        if last_group != null {
            obj{
                OBJ_ID: 1049,
                X: offset + j*frame_speed,
                Y: -60,
                TARGET: last_group,
                ACTIVATE_GROUP: false,
            }.add()
        }

        obj{
            OBJ_ID: 901,
            X: offset + j*frame_speed-2,
            Y: -20,
            TARGET: group,
            DURATION: framerate,
            MOVE_X: frame_speed+2,
        }.add()

        obj{
            OBJ_ID: 1049,
            X: offset + j*frame_speed,
            Y: -40,
            TARGET: group,
            ACTIVATE_GROUP: true,
        }.add()

        last_group = group
        last_last_group = last_group
        last_frame = frame
        if j%3==0 { $.print("\u{1b}[1Aframe ",j+1,"/",text.length) }
    }
}